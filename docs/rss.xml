<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>枕上诗书闲的博客</title><link>http://blog.587459.xyz</link><description>个人使用的一个博客</description><copyright>枕上诗书闲的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/118879111?v=4</url><title>avatar</title><link>http://blog.587459.xyz</link></image><lastBuildDate>Mon, 01 Sep 2025 14:19:35 +0000</lastBuildDate><managingEditor>枕上诗书闲的博客</managingEditor><ttl>60</ttl><webMaster>枕上诗书闲的博客</webMaster><item><title>Windows10将Chrome浏览器及用户数据放到D盘</title><link>http://blog.587459.xyz/post/18.html</link><description>## 1.下载chrome_updater

根据架构下载，一般的电脑都是下amd64的，是在不知道建议先搜一下自己电脑cpu的架构。</description><guid isPermaLink="true">http://blog.587459.xyz/post/18.html</guid><pubDate>Tue, 10 Jun 2025 12:50:43 +0000</pubDate></item><item><title>Windows安装PostgreSQL</title><link>http://blog.587459.xyz/post/17.html</link><description>## 1.下载PostgreSQL安装程序

| 1.[PostgreSQL下载链接(点击即可跳转)](https://www.enterprisedb.com/downloads/postgres-postgresql-downloads) |             2.点击版本旁边的Windows下载按钮即可              |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues17.01.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues17.02.png' style='zoom:50%;' /&gt; |

## 2.点击安装程序进行安装

|                        1.双击安装程序                        |                       2.自定义安装目录                       |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues17.03.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues17.04.png' style='zoom:50%;' /&gt; |
|                          3.默认全选                          |                         4.点击下一步                         |
| &lt;img src='https://hantianzhun.github.io/blog/issues17.05.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues17.06.png' style='zoom:50%;' /&gt; |
|                       5.设置数据库密码                       |               6.端口默认即可，有需要可自行修改               |
| &lt;img src='https://hantianzhun.github.io/blog/issues17.07.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues17.08.png' style='zoom:50%;' /&gt; |
|                        7.一般默认即可                        |                         8.点击下一步                         |
| &lt;img src='https://hantianzhun.github.io/blog/issues17.09.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues17.10.png' style='zoom:50%;' /&gt; |
|                         9.点击下一步                         |         10.不需要安装额外软件需取消勾选，点击finish          |
| &lt;img src='https://hantianzhun.github.io/blog/issues17.11.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues17.12.png' style='zoom:50%;' /&gt; |

## 3.连接PostgreSQL数据库

### 3.1使用安装时附带的pAdmin4连接

|                          1.点击打开                          | 2.默认为english，点击File-&gt;Pref-&gt;Miscel-&gt;User-&gt;lang选择Chinese(Simplified) |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues17.13.png'  /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues17.14.png' style='zoom: 50%;' /&gt; |
|             3.点击保存，到如下界面，点击Refresh              |                    4.重启后，出现如下界面                    |
| &lt;img src='https://hantianzhun.github.io/blog/issues17.15.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues17.16.png' style='zoom:50%;' /&gt; |
|       5.点击Server，弹出的窗口输入密码，可勾选保存密码       |             6.在数据库架构public下的表可以创建表             |
| &lt;img src='https://hantianzhun.github.io/blog/issues17.17.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues17.18.png' style='zoom:50%;' /&gt; |

&gt; [!TIP]
&gt;
&gt; **说实话，用惯了Navicat这一下子给我脑子整的嗡嗡的，主要是不了解其他的也用不了。</description><guid isPermaLink="true">http://blog.587459.xyz/post/17.html</guid><pubDate>Mon, 09 Jun 2025 13:13:48 +0000</pubDate></item><item><title>Windows10安装MySQL</title><link>http://blog.587459.xyz/post/16.html</link><description>## 1.使用MySQL Installer安装

### 1.1下载MySQL Installer

| 1.[MySQL Installer下载链接(点击即可跳转)](https://dev.mysql.com/downloads/installer/),下载不带web的安装程序 |  2.点击下载，出现如下界面，点击最下面的no thank，会进行下载  |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.01.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.02.png' style='zoom:50%;' /&gt; |

&gt; [!TIP]
&gt;
&gt; 但是上述安装程序有部分版本没有，安装完会多一个MySQL Installer，强迫症狂喜
&gt;

### 1.2MySQL Installer安装

|                      1.双击打开安装程序                      |          2.一般选Server only，想自定义就选最后一项           |         3.上一张图点击下一步，这张点击执行(Execute)          |
| :----------------------------------------------------------: | :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.03.png' style='zoom: 50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.04.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.05.png' style='zoom:50%;' /&gt; |
| 4.这是成功了，若是失败一般是Windows的C++库的问题，装一个就好了 |               5.上一张图点击下一步，这一张也是               | 6.设置端口号和数据库配置，一般默认即可，若之前装过，需改动port |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.06.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.07.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.08.png' style='zoom:50%;' /&gt; |
|     7.第一种需Navicat15+，改了加密方式，第二种则没有限制     |            8.输入root用户的密码，两遍，点击下一步            |             9.这个是注册开机服务项，一般默认即可             |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.09.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.10.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.11.png' style='zoom:50%;' /&gt; |
| 10.点击执行(Execute)[这步前面不小心漏了一步，不重要，自用默认和第三项都行] |              11.全打上对勾就是好了，点击Finish               |               12.显示MySQL状态，点击下一步即可               |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.12.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.13.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.14.png' style='zoom:50%;' /&gt; |
|             13.可查看安装log，点击Finish结束安装             |              14.安装后就是有一个MySQL Installer              |              15.可以单独卸载MySQL Installer解决              |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.15.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.16.png'  /&gt; |                                                              |

## 2.使用MySQL Server.exe安装

### 2.1下载MySQL Server.exe

| 1.[MySQL Server.exe下载链接(点击即可跳转)](https://dev.mysql.com/downloads/installer/)，点击MSI进行下载 |              2.点击最下面的no thank，会进行下载              |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.17.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.18.png' style='zoom:50%;' /&gt; |

&gt; [!TIP]
&gt;
&gt; 有些版本有MySQL Sever的MSI安装程序，有些只有ZIP，ZIP看第三种方法

### 2.2MySQL Server.exe安装

#### 2.2.1MySQL 8

|                      1.双击打开安装程序                      |                      2.同意并点击下一步                      |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.19.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.20.png' style='zoom:50%;' /&gt; |
| 3.一般选典型，也可选第二个自定义但只改安装路径，除非懂每一项的作用 |                          4.点击安装                          |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.21.png'  style='zoom:50%;'/&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.22.png' style='zoom:50%;' /&gt; |
|                5.默认勾选进行配置，点击Finish                |                         6.点击下一步                         |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.23.png'  style='zoom:50%;'/&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.24.png' style='zoom:50%;' /&gt; |
|                     7.可选数据库存放位置                     |                8.可配置类型和端口号，一般默认                |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.25.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.26.png' style='zoom:50%;' /&gt; |
|                       9.root用户的密码                       |                    10.安装MySQL自启动服务                    |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.27.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.28.png' style='zoom:50%;' /&gt; |
|          11.自行选择，和我一样也行(上面忘记截图了)           |                   12.示例数据库，自行选择                    |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.29.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.30.png' style='zoom:50%;' /&gt; |
|                    13.点击执行，进行安装                     |                   14.安装完成，点击下一步                    |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.31.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.32.png' style='zoom:50%;' /&gt; |
|               15.整个MySQL安装成功，点击Finish               |                                                              |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.33.png' style='zoom:50%;' /&gt; |                                                              |

#### 2.2.2MySQL 5

|               1.在典型安装后，自动弹出这个弹窗               |                         2.点击下一步                         |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.34.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.35.png'/&gt; |
|             3.默认勾选启动数据库配置，点击finish             |                         4.点击下一步                         |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.36.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.37.png' /&gt; |
|   5.第一次安装选择和我一样的标准安装，第一种自定义自行摸索   |               6.安装MySQL服务，默认勾选自启动                |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.38.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.39.png' /&gt; |
|          7.root用户密码，可勾选远程访问允许root用户          |                          8.点击执行                          |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.40.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.41.png'/&gt; |
|                    9.安装完毕，点击finish                    |                                                              |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.42.png' style='zoom:50%;' /&gt; |                                                              |

## 3.使用MySQL Server.ZIP安装

### 3.1下载MySQL Server.ZIP

| 1.[MySQL Server.zip下载链接(点击即可跳转)](https://dev.mysql.com/downloads/installer/)，点击ZIP进行下载，不要下debug |              2.点击最下面的no thank，会进行下载              |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.17.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.18.png' style='zoom:50%;' /&gt; |

### 3.2MySQL Server.ZIP安装

&gt; [!TIP]
&gt;
&gt; [https://wwwe.lanzouq.com/ik7yi2ydalgh 密码:3c5t](https://wwwe.lanzouq.com/ik7yi2ydalgh)
&gt;
&gt; 也可以看看上面Claude生成的教程，有5.7.44和8.x版本

#### 3.2.1解压和配置环境变量

|                    1.解压到想要存放的目录                    |                      2.配置系统环境变量                      |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.43.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.44.png'/&gt; |

#### 3.2.2.A在MySQL 5解压目录新建my.ini

```ini
[mysqld]
# 设置mysql的安装目录
basedir='D:/mysql-5.7.44-winx64'
# 设置mysql数据库的数据的存放目录
datadir='D:/mysql-5.7.44-winx64/data'
# 设置默认使用的端口
port=3306
# 允许最大连接数
max_connections=200
# 允许连接失败的次数
max_connect_errors=10
# 服务端使用的字符集（5.7版本推荐utf8mb4）
character-set-server=utf8mb4
# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
# MySQL 5.7 特有配置
sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES

[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4

[client]
# 设置mysql客户端连接服务端时默认使用的端口
port=3306
default-character-set=utf8mb4
```

#### 3.2.2.B在MySQL 8解压目录新建my.ini

```ini
[mysqld]
# 设置mysql的安装目录
basedir='D:/mysql-8.4.5-winx64'
# 设置mysql数据库的数据的存放目录
datadir='D:/mysql-8.4.5-winx64/data'
# 设置默认使用的端口
port=3306
# 允许最大连接数
max_connections=200
# 允许连接失败的次数
max_connect_errors=10
# 服务端使用的字符集
character-set-server=utf8mb4
# 创建新表时将使用的默认存储引擎
default-storage-engine=INNODB
# 默认使用'mysql_native_password'插件认证
default_authentication_plugin=mysql_native_password

[mysql]
# 设置mysql客户端默认字符集
default-character-set=utf8mb4

[client]
# 设置mysql客户端连接服务端时默认使用的端口
port=3306
default-character-set=utf8mb4
```

#### 3.2.3 初始化数据库

```cmd
# 以管理员身份打开命令提示符，执行：

# 切换到mysql的bin目录（示例）
D:
cd D:/mysql-5.7.44-winx64/bin

# 初始化数据库（会生成临时密码）
mysqld --initialize --console
```

**重要：** 记录输出中的临时密码，类似：

```cmd
A temporary password is generated for root@localhost: kT7!mN9pQ2xR
```

#### 3.2.4安装 MySQL 服务

```cmd
# 继续在管理员命令提示符中执行：

# 安装MySQL服务
mysqld --install MySQL

# 设置开机自启
sc config MySQL start= auto

# 启动MySQL服务
net start MySQL
```

### 3.3首次登录和密码设置

#### 3.3.1登录MySQL

```cmd
mysql -u root -p

# 输入刚才记录的临时密码
```

#### 3.3.2修改root密码

```sql
-- 修改密码（将 'your_new_password' 替换为您的新密码）
ALTER USER 'root'@'localhost' IDENTIFIED BY 'your_new_password';

-- 刷新权限
FLUSH PRIVILEGES;

-- 退出
EXIT;
```

### 3.4验证安装

#### 3.4.1重新登录测试

```cmd
mysql -u root -p

# 使用新密码登录
```

#### 3.4.2查看版本信息

```sql
SELECT VERSION();
```

#### 3.4.3查看数据库

```sql
SHOW DATABASES;
```

## 4.使用Navicat连接MySQL

|                      1.打开Navicat软件                       |                      2.选择MySQL数据库                       |
| :----------------------------------------------------------: | :----------------------------------------------------------: |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.45.png' style='zoom:50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.46.png' style='zoom:50%;' /&gt; |
|          3.连接名随意，输入root账户的密码，点击确定          |         4.即可看到默认的数据库，可新建数据库再创建表         |
| &lt;img src='https://hantianzhun.github.io/blog/issues16.47.png' style='zoom: 50%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues16.48.png' style='zoom:50%;' /&gt; |

。</description><guid isPermaLink="true">http://blog.587459.xyz/post/16.html</guid><pubDate>Mon, 09 Jun 2025 13:07:16 +0000</pubDate></item><item><title>grep和sed及awk使用</title><link>http://blog.587459.xyz/post/15.html</link><description>## 一、shell环境与常用命令

### 1、Linux下有许多shell环境

```shell
1、Bash (Bourne Again Shell)：最广泛使用的 shell，功能强大且兼容 Bourne shell (sh)。</description><guid isPermaLink="true">http://blog.587459.xyz/post/15.html</guid><pubDate>Fri, 24 Jan 2025 12:34:35 +0000</pubDate></item><item><title>python部署+Jmeter安装</title><link>http://blog.587459.xyz/post/14.html</link><description># 1.python项目部署

## 1.1下载Python安装包

- 在Python官网进行下载：[Python官网下载地址](https://www.python.org/downloads/) [按住ctrl点击链接即可打开]

## 1.2安装Python

![](https://hantianzhun.github.io/blog/issues14.01.png)

![](https://hantianzhun.github.io/blog/issues14.02.png)

![](https://hantianzhun.github.io/blog/issues14.03.png)

- **点击install，完成后弹出的界面点击close即可**
- **在cmd里面输入`python -V`**

![](https://hantianzhun.github.io/blog/issues14.04.png)

## 1.3安装python需要的软件包

- 安装python包，在项目代码的路径(不要出现中文)

```cmd
安装第三方库
pip install -r 文件名.txt（文件里是需要安装的包列表）
pip  install  包名==版本号
使用镜像源进行包的安装（可以提升速度）
pip install -r requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple
使用镜像源更新pip
python -m pip install -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple --upgrade pip
```

![](https://hantianzhun.github.io/blog/issues14.05.png)

&gt; [!NOTE]
&gt; 没error就是正常安装了包

- 查看包，`pip list`

![](https://hantianzhun.github.io/blog/issues14.06.png)

- python包安装成功，在项目路径使用`python xxx.py`即可

![](https://hantianzhun.github.io/blog/issues14.07.png)

# 2.Jmeter安装+使用

## 2.1Jmeter安装

- 在Apache官网进行下载：[Jemter下载地址](https://jmeter.apache.org/download_jmeter.cgi) [按住ctrl点击链接即可打开]

- 将下载的apache-jmeter-5.6.3.zip的压缩包解压到想要的目录即可（不可是中文路径）

## 2.2Windows的JDK是安装包

&gt; [!CAUTION]
&gt; 安装配置环境变量之后JDK改位置和环境变量，双击Jmeter会无法使用

- 配置环境变量，验证是否部署成功  java -version
  - 详情可见：[01_Java环境变量配置](./01_Java环境变量配置.md) [按住ctrl点击链接即可打开]

- 双击`安装目录/bin/ApacheJMeter.jar`即可打开中文界面的Jmeter

## 2.3Windows的JDK是压缩包

- 解压到想要的文件夹
- 配置环境变量，验证是否部署成功  java -version
  - 详情可见：[01_Java环境变量配置](./01_Java环境变量配置.md) [按住ctrl点击链接即可打开]

- 使用jmeter.bat启动
  1. 打开 JMeter 的安装目录，找到 `bin` 文件夹。</description><guid isPermaLink="true">http://blog.587459.xyz/post/14.html</guid><pubDate>Fri, 17 Jan 2025 15:35:01 +0000</pubDate></item><item><title>数据库学习笔记</title><link>http://blog.587459.xyz/post/13.html</link><description>## **1. 为什么要学习数据库？在工作中数据库的作用**

### 1.1作用

- 数据库用于存储和管理数据。</description><guid isPermaLink="true">http://blog.587459.xyz/post/13.html</guid><pubDate>Fri, 17 Jan 2025 15:29:03 +0000</pubDate></item><item><title>Linux部署</title><link>http://blog.587459.xyz/post/12.html</link><description># 1.禅道开源版

## 1.找到官网

- [禅道下载界面](https://www.zentao.net/downloads.html) [按住ctrl点击链接即可打开]

## 2.本地安装和在线安装

### 2.1本地安装

1. 在禅道下载界面选择linux+一键安装包，点击下载，文件在下载目录

2. 使用xftp或者rz传输到linux

3. 解压一键安装包

   ```shell
   tar -xzvf ZenTaoxxx.tar.gz -C /opt
   ```

### 2.2在线安装

1. 点击开源版的安装指南，找到linux一键安装包（推荐）

2. 使用wget进行下载(复制指南的)

   ````shell
   wget https://www.zentao.net/dl/zentao/18.5/ZenTaoPMS.18.5.zbox_64.tar.gz
   ````

3. 解压一键安装包

   ```shell
   tar -xzvf ZenTaoxxx.tar.gz -C /opt
   ```

## 3.启动禅道

&gt; [!CAUTION]
&gt; 运行成功之后若无法通过IP地址进行访问，检查系统防火墙
&gt; systemctl status firewalld (查看防火墙运行状态)
&gt; systemctl stop firewalld (暂时关闭)
&gt; systemctl disable firewalld (关闭开机自启动)

### 3.1运行zbox

```shell
[root@localhost ~]# cd /opt
[root@localhost opt]# ls
btop  zbox
[root@localhost opt]# cd zbox/
[root@localhost zbox]# ./zbox start
 16:03:17.91 INFO  ==&gt; Starting service with Apache port=80, MySQL port=3306, Redis port=6379...
```

## 4.启动问题

### 4.1端口占用：没有关程序(./zbox stop)导致

- 查看被占用的端口进程（ps -ef |grep mysql/apache）
- 查进程，注意被占用的是哪个进程

![](https://hantianzhun.github.io/blog/issues12.01.png)

![](https://hantianzhun.github.io/blog/issues12.02.png)

## 5.禅道的项目结构(集成项目软件包):php+apache+mysql

### 5.1zbox文件夹下的目录介绍

```shell
app：存放的是开发人员写的代码
bin：可执行文件的命令
etc：配置文件  端口号修改等等
tmp：临时文件
auth：作者相关文件
data：数据相关的文件
logs：日志文件
run：运行程序相关文件
```

# 2.JavaWeb项目(Tomcat)

- 组成 ：案例依赖：编程语言(java)  jdk +服务器（tomcat）+数据库（mysql）

## 2.1安装jdk

- 配置环境变量，验证是否部署成功  java -version
  - 详情可见：[01_Java环境变量配置](./01_Java环境变量配置.md) [按住ctrl点击链接即可打开]

## 2.2安装tomcat

- 使用ftp软件上传到linux服务器

- 解压缩启动服务，验证环境部署是否成功：在浏览器中输入地址[http://ip:端口]，出现tomcat页面√

### 2.2.1apache-tomcat-xx.xx.xx下所有目录详解

- bin ：可执行文件的命令文件，启动服务器在该目录

- conf：相关配置文件，如修改端口号(server.xml)等

- lib：动态库链接

- logs：日志文件，如出现异常时可查找日志发现问题所在

- tmp：临时文件

- weapps：开发人员写的程序代码包  （xxx.war）

- work：一些启动目录

### 2.2.2tomcat启动失败

#### 2.2.2.1防火墙没关

&gt; [!CAUTION]
&gt; 运行成功之后若无法通过IP地址进行访问，检查系统防火墙
&gt; systemctl status firewalld (查看防火墙运行状态)
&gt; systemctl stop firewalld (暂时关闭)
&gt; systemctl disable firewalld (关闭开机自启动)

#### 2.2.2.2端口冲突，被占用 

```
ps -ef|grep tomcat(进程)
netstat -ano|grep 8080(端口号)
kill -9 进程号 
```

#### 2.2.2.3修改端口号

- 修改apache-tomcat-xx.xx.xx目录下的conf/server.xml文件

##### 2.2.2.3.1部分修改

```shell
1.# vim ./apache-tomcat-xx.xx.xx/conf/server.xml
2.# 使用vim进行搜索	/8080 并按回车（Enter）
3.# 修改未被注释为需要的端口号（不可与被占用的端口号一致）
4.# 保存退出
```

![](https://hantianzhun.github.io/blog/issues12.03.png)

##### 2.2.2.3.2全部修改
```shell
1.# vim ./apache-tomcat-xx.xx.xx/conf/server.xml
2.# 全部修改需要的端口号（不可与被占用的端口号一致）
	:%s/8080/9090/g '%'是整个文件，其他同下
	:1,$s/8080/9090/g ':'是进入命令模式1,$表示从第1行到$代表最后一行,'s'是substitute的缩写，表示替换操作,'/8080'是要被替换的文本,'g':替换每一行中所有匹配的8080
3.#保存退出
```

## 2.3安装并运行数据库

**示例：Centos7安装MySQL_5.6.51**

### 2.3.1安装MySQL

```shell
wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm #获取MySQL5的yum源
rpm -ivh mysql-community-release-el7-5.noarch.rpm #安装MySQL5的yum源
'安装数据库' yum -y install mysql-server
```

### 2.3.2运行数据库

```shell
systemctl start mysqld #启动MySQL服务
```

#### 2.3.2.1MySQL无法启动

```shell
#解决办法一
ps -ef | grep mysql #筛选出包含MySQL字段的进程
netstat -ano | grep 3306 #筛选出使用3306端口的进程
kill -9 pid #强制关闭进程
systemctl start mysqld #启动MySQL服务

#解决办法二
systemctl stop mysqld #关闭MySQL服务
systemctl start mysqld #启动MySQL服务

#解决办法三---&gt;最好使用前两种
reboot #重启服务器，MySQL默认开机自启
systemctl status mysqld #查看MySQL服务状态
```

### 2.3.2赋予权限并设置密码

```sql
mysql -u root -p #本机连接MySQL
show databases; #查看数据库
use mysql; #使用mysql数据库
select user,host,password from user; #查看数据库的用户名、host和密码
# 新建root用户，密码为123456，允许远程连接，赋予全部权限
GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION;
# 刷新权限
FLUSH PRIVILEGES;
```

## 2.4远程连接数据库

**Navicat for MySQL v10为例**

![](https://hantianzhun.github.io/blog/issues12.04.png)

![](https://hantianzhun.github.io/blog/issues12.05.png)

## 2.5上传程序员写的代码

&gt; [!CAUTION]
&gt; 创建的数据库名称随意(非中文)，根据库字符集和表结构以及表数量、数据都与项目文档保持一致

### 2.5.1创建数据库，导入SQL文件

![](https://hantianzhun.github.io/blog/issues12.06.png)

![](https://hantianzhun.github.io/blog/issues12.07.png)

![](https://hantianzhun.github.io/blog/issues12.08.png)

![](https://hantianzhun.github.io/blog/issues12.09.png)

![](https://hantianzhun.github.io/blog/issues12.10.png)

### 2.5.2修改jdbc连接文件

![](https://hantianzhun.github.io/blog/issues12.11.png)

### 2.5.3上传jdbc+log4j文件

**上传到tomcat解压目录下的conf里面**

![](https://hantianzhun.github.io/blog/issues12.12.png)

### 2.5.4上传jar或war包

**上传到tomcat解压目录下的webapps里面**

![](https://hantianzhun.github.io/blog/issues12.13.png)

### 2.5.5浏览器访问http://ip:端口号/包名(在webapps查看) 

- 若有对应的文档里面有**项目访问URL**以文档优先、本文为辅助参考

## 2.6测试过程中发现bug

- 提交bug-----&gt;开发修改bug，提交一个新的xx.war------&gt;测试拿到包，停止服务，把最新的xx.war复制到webapps目录下，启动服务，测试
- 在项目组中发包的频率：一般项目迭代周期： 二周。</description><guid isPermaLink="true">http://blog.587459.xyz/post/12.html</guid><pubDate>Fri, 17 Jan 2025 15:25:46 +0000</pubDate></item><item><title>Java环境变量配置</title><link>http://blog.587459.xyz/post/11.html</link><description>## 1.下载JDK

首先我们需要下载 java 开发工具包 JDK，下载地址：[Oracle 中国 Java 下载](https://www.oracle.com/cn/java/technologies/downloads/) [按住ctrl点击链接即可打开]

在下载页面中根据自己的系统选择对应的版本，以 Window 64位系统为例：

![](https://hantianzhun.github.io/blog/issues11.01.png)

下载后双击安装，安装过程中可以自定义安装目录等信息，例如我们选择安装目录为`D:\Program Files\Java\jdk`

## 2.配置环境变量

### 2.1Windows系统

#### 2.1.1Windows7

安装完成后，右击'我的电脑'，点击'属性'，选择'高级系统设置'

![](https://hantianzhun.github.io/blog/issues11.02.png)

选择'高级'选项卡，点击'环境变量'

![](https://hantianzhun.github.io/blog/issues11.03.png)

出现如下图所示的画面：

![](https://hantianzhun.github.io/blog/issues11.04.png)

- 在 '系统变量' 中设置 3 项属性
- JAVA_HOME、PATH、CLASSPATH(大小写无所谓,但是要与path里面引用的一致)
- 若已存在则点击'编辑'，不存在则点击'新建'。</description><guid isPermaLink="true">http://blog.587459.xyz/post/11.html</guid><pubDate>Fri, 17 Jan 2025 15:07:36 +0000</pubDate></item><item><title>Navicat的历史版本</title><link>http://blog.587459.xyz/post/10.html</link><description>## 1.通过固定链接下载

### Navicat的官网提供了部分历史版本的下载链接，你可以根据需要选择对应版本下载。</description><guid isPermaLink="true">http://blog.587459.xyz/post/10.html</guid><pubDate>Fri, 17 Jan 2025 14:47:50 +0000</pubDate></item><item><title>Linux基础知识和命令</title><link>http://blog.587459.xyz/post/9.html</link><description># Linux基础知识和命令

# 1.为什么要学习Linux，Linux在工作中用来干什么？

1. Linux在工作中主要用于环境部署（程序代码包  .jar  .war）--&gt;部署到服务器上--&gt;有页面或者是app端
2. 使用服务器获取日志，协助定位问题

# 2.计算机组成

## 2.1硬件

- 显示器 、鼠标 、键盘 、主机（主板  内存条   网卡  显卡 声卡   CPU：核   电源   风扇）

## 2.2操作系统

1. PC端：x86   32位操作系统，x86-64  64位操作系统
2. 手机端：arm 32位操作系统，arm64  64位操作系统
3. Windows、MacOS、dos、Linux、Andorid、ios、鸿蒙
4. 语言：c语言 、java语言、python--&gt;解释器或者是编译器--&gt;转换成计算机能识别的二进制代码程序代码--&gt;指令      数据

## 2.3应用软件

- web端--&gt;app端（qq、微信、淘宝、美团、手机银行app）--&gt;小程序（微信小程序、支付宝小程序）--&gt;嵌入式设备与App交互


# 3.Linux操作系统

1. Linux内核（由linus开发出）--&gt;放到开源平台--&gt;图标（企鹅）、名字linux，没有图形化界面，纯命令界面

2. 小巧、功能全、安全、多用户多任务的操作系统

3. 发行版本：RedHat、Debian、Arch、openSUSE、CentOS、Ubuntu等

4. 客户端系统：Windows、Android、IOS、Harmony、个人用Linux

5. 服务端系统：99%Linux

6. 服务器：365天*24小时运行、服务器的本质也是电脑，是功能更加强大的电脑

7. 学校一般自建服务器（托管官网、学生数据等）

8. 中小型公司租云服务器：阿里云、腾讯云、百度云

9. 大型公司自建服务器，提供云服务器资源

# 4.电脑装多系统

- VM虚拟机：在宿主机中独立出一块空间（CPU，内存，网卡，显卡，声卡）
- 镜像文件：后缀为.iso的操作系统文件

# 5.软件的安装

-   安装的路径中不要出现中文，或者是特殊符号   it-install(错误示范)

-   安装路径中只能有字母或下划线

-    D:\it_install、D:\vm_install

# 6.远程连接、换源、安装软件包

## 6.1使用`ip address`or`ifconfig`命令查看IP地址

## 6.2如果不能上网，解决办法？

```shell
cd /etc/sysconfig/network-scripts
vi ifcfg-ens33#后半网卡名可不同
```
-   进入后将光标移动到最下面，然后输入`i`

-   将最后一行的no修改为yes，再点击键盘左上角的ESC，输入`:wq!`再按回车（按ZZ也可）

## 6.3如果源不可用，解决办法？

```shell
#CentOS7换源
curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
```
## 6.4出现command  not  found如何解决？

  - 尝试安装使用的命令、例：`yum install ifconfig`
  - 提示包不存在可使用yum search 命令、例：`yum search ifconfig`

## 6.5yum的作用

```shell
#在线下载并安装
yum search 安装包的包名
yum -y install 安装包名
```

## 6.6linux获取文件

1. 使用ftp进行上传
2. 在linux使用rz命令
3. 在线下载

```shell
wget  [URL] ---&gt;文件保存为原始文件名
curl -O [URL] ---&gt;文件保存为原始文件名
curl -o [filename] [URL] ---&gt;文件保存并重命名为[filename]
```

# 7.Linux文件管理系统

```shell
#目录结构树
/etc     存放配置相关的文件      /etc/profile 环境变量 /etc/sysconfig/newrok-Scripts 网卡配置
/bin     存放的是可执行的命令文件     启动服务器
/sbin    存放的是root用户的可执行的命令文件
/root    是root用户的家目录
/home    是普通用户的家目录
/opt     存放的是临时文件相关的一些目录
/mnt     存放的是挂载文件相关的目录
```

# 8.Linux基本命令

## 8.1目录相关的命令

```shell
'创建文件夹' mkdir 文件夹名1
'创建多个文件夹' mkdir 文件夹1 文件夹2
'创建多层级的文件' mkdir -p A/B
'删除空文件夹' rmdir 文件夹名
'删除非空的文件夹' rm -r 非空目录名
'强制删除非空文件夹' rm -rf 非空的目录名 
'复制文件夹到指定的目录' cp -r 要复制的文件 复制到哪里去
'剪切文件到指定的目录' mv 要剪切的文件 剪切到哪里去
'重命名' mv 要重命名的文件夹/文件 新的文件夹/文件的名字
```

##  8.2编写路径

-  绝对路径：一次到达，从根目录开始写、例：`/etc/ssh/sshd_config`
-  相对路径：相对与当前目录而言、例：`../home/hanli`(假设当前目录为root)

## 8.3文件相关的命令

```shell
'创建文件' touch 文件1
'创建多个文件' touch f2 f3
'弹出提示信息删除文件' rm 文件名  
'强制删除文件' rm -f 文件名
'复制文件' cp 要复制的文件 复制到哪里去
'剪切文件' mv 要剪切的文件 剪切到哪里去
'覆盖写如内容到文件中'
echo 'i love linux' &gt; f1
echo 'i love python' &gt; f1
'追加写内容到指定的文件' echo 'i love oracle' &gt;&gt; f1
```

```shell
'查看文件的内容'
cat 查看小文件
cat -n 文件名 #n不能代表代表任意数字
more 文件名
less 文件名 #按照屏幕比例显示内容，可以输入next进行翻页
head -n 文件名 #查看文件的前n行，n代表的任意数字
tail -n 文件名 #查看文件的最后n行，n代表任意数字
nl 文件名 #带行号显示文件的所有内容
'查看一个文件的第3行到第5行' sed -n 'n1,n2p' 文件名  #n1和n2代表的是两个数字
'查看一个文件的第3行到第5行' head -5 文件名 | tail -3
'查看文件的第5行' sed -n '5p' 文件名
```

## 8.4vi/vim编辑器

- vi编辑器模式：命令模式，末行模式，编辑模式
- 默认进入的是命令模式（只读）--&gt;`i`或`a`或`o`--&gt;编辑模式：输入内容
- 编辑模式--&gt;按键盘左上角`ESC`--&gt;命令模式
- 命令模式下--&gt;输入`:`--&gt;末行模式：保存退出、强制退出、保存不退出

```shell
vi 文件名
'打开一个文件，并把光标定位到161行' vi +161 文件名

'命令模式下的命令'
大写G '跳转到行尾'
小写gg '跳转到行首'
ngg 'n代表任意数字,第n行行首'
yy '复制一行'
nyy '复制n行'
p '粘贴'
dd '删除'
ndd '删除n行'
大写ZZ '保存并退出'

'末行模式下的命令'
:set number '显示行号'
:set nonumber '取消行号'
:wq '保存退出'
:q! '强制退出'
:wq! '保存并强制退出'
:1,$s/旧字符/新字符/g '把第一行到最后一行的所有的旧字符修改为新字符'
:1,3s/旧字符/新字符/g '把第一行到第三行的所有的旧字符修改为新字符'
:4s/旧字符/新字符/g '把第四行的所有的旧字符修改为新字符'
:1,$s/旧字符/新字符 '把第一行到最后一行的第一个旧字符修改为新字符'
```

## 8.5打包压缩相关的命令

```shell
#打包：可以对文件也可以对文件夹进行打包
tar -cvf T.tar 要打包的文件/文件夹 'c：create f：file v：verbose 过程' '打包'

#压缩：压缩只能对文件，对包进行压缩
gzip 文件 '创建压缩包'
gunzip xxx.gz '默认解压到当前目录'
gzip -d xxx.gz '解压缩，解压成功后删除xxx.gz文件'
zip 文件 '创建压缩包'
unzip xxx.zip '默认解压到当前目录'

#打包压缩：
tar -czvf T.tar.gz 文件 文件夹1 文件2 文件夹2 'z：gzip 压缩' '创建压缩包'
tar -xzvf T.tar.gz '默认解压到当前目录'
tar -tzvf T.tar.gz '查看压缩文件'
tar -xzvf T.tar.gz -大写C 目录 '解压缩到指定的目录'
```

## 8.6进程服务相关的命令

### 8.6.1程序和进程的区别？

- 程序是死的
- 进程：正在运行的程序(动态的)
- 杀进程而不是杀程序

```shell
'关闭防火墙的命令' systemclt stop firewalld #d代表的是进程，暂时关闭，重启防火墙默认开启
systemctl restart firewalld #重启防火墙服务
systemctl disable firewalld #关闭防火墙开机自启
systemctl enable firewalld #防火墙开机自启(默认开启)
systemclt start mysqld.service #启动MySQL服务
systemctl start httpd #启动MySQL服务

'查看进程' ps -ef | grep tomcat
| 管道符,分割开两个命令，把前一个命令处理的结果交给后面一个命令继续处理
grep 过滤查找

'杀进程' kill -9 pid
```

## 8.7权限相关的命令

### 8.7.1用户

**Linux系统中有两类用户**

- 一类是管理员用户 root /root [root@localhost opt]# root用户的标识符 #
- 一类是普通用户 xiaowang /home [xiaowang@localhost opt]$   普通用户的标识符  $

```shell
'创建用户' useradd 用户名
'修改用户密码' passwd 用户名
'切换用户' su 用户名 '高级别切换到普通用户不需要输入密码，同级别的或者是低级别切换到高级别是需要输入密码'
'删除用户' userdel 用户名
'删除用户及相应的信息' userdel -r 用户名
'用户的信息存放在' /etc/passwd   
				xiaoming:x:1000:1001::/home/xiaoming:/bin/bash
				用户名:密码:用户id:组ID:用户的家目录:shell环境
```

### 8.7.2组

```shell
'创建组' groupadd 组名
'删除组' groupdel 组名 '不能删除有用户的组'
'组的信息存放在' /etc/group
			  xiaoming:x:1001:
			  组名：组密码：组ID
```

**Linux系统的权限管理机制：组**

- Linux系统中的用户不能独立于组而存在，每一个用户都有一个主属组；权限是通过组来管理，赋予权限给某一个组，该组的用户就拥有了相应的权限，如果取消了该组响应的权限，该组的用户就取消了用户的权限
- 创建一个组的时候，如果你没有给这个用户指定组，系统会自动的创建一个和这个用户名同名的组，然后把这个用户添加到这个组中

```shell
# 创建一个用户并确定属组
useradd -g 组id 用户名
```

### 8.7.3权限

- Linux系统是一个多用户多任务的操作系统，安全，对每一个文件或者文件夹都管理了权限
- Linux系统中的权限是针对文件或者是文件夹的权限，对系统中的每一个文件或者文件夹都涉及到了权限

**权限**：组来管理权限
**对于一个文件或者文件夹而言**

- 文件的所有者        这个文件或者文件夹是谁创建者
- 文件的所属组        这个文件的所有者属于哪个组，这个文件就属于哪个组
- 文件的其他组        不在所属组之外的都叫其他组

`rwx-r-x-r-x`：所有者的权限--所属组的权限--其他组的权限
**对文件而言**

```shell
读：查看 (cat head tail)
写：编辑 (echo '' &gt; 文件)
执行：可以运行文件 (./zbox start、sh startup.sh)
```

**对文件夹而言**

```shell
读:读取查看文件夹中的内容 ls ls-a
写：可以在文件夹中创建文件夹创建文件复制剪切
执行:进入这个文件文件 cd
```

### 8.7.4修改权限

**权限的数字： `r 读 4` `w  写  2` `x  执行 1`**

#### 方法一

**数字法修改权限**：4+2+1

```shell
第一个数字代表的是所有者的权限，第二个数字代表的是所在组的权限，第三个数字是其他组的权限
chmod 777 文件名 '给所有用户赋予读写执行权限'
```

#### 方法二

通过字母来修改权限   u   所有者   g 所在组     o 其他组    a（all）所有用户

```shell
chmod u=rwx 1.txt
chmod u-r 1.txt
chmod a=r 1.txt
```

## 8.8其他的常用命令

```shell
cd 'change directory' '切换目录'
cd .. '切换到上一级目录'
cd ../.. '切换到上上一级目录'
cd / '切换到根目录'
cd ~ '切换到家目录'
cd - '切换到上次目录'
. '代表的是当前目录'
.. '代表的是上级目录'
ls 'list' '列出所有文件'
ls -a '显示所有的文件' #all: 所有的文件的包括了隐藏
ls -l '显示文件的详细信息'
ls -al '显示所有文件的详细信息'
pwd 'print work directory' '打印当前工作目录'
tree '树形结构展示当前目录下的所有文件或文件夹'
clear '清空终端屏幕'
man 命令 '查看帮忙命令' = 命令 --help
```

## 8.9常见文件后缀

```shell
.exe  ---可执行
.iso  ---镜像文件
.bat  ---windoes中可执行文件
.sh   ---Linux中可执行文件
.xml  ---配置文件
```

# 9.杂

## 9.1项目组成员

1. 项目经理
2. 产品经理（BA）
3. 开发
4. 概要设计：实时  定时
5. 详细设计
6. 测试
7. DBA
   - 数据-----》表（字段长度）---------》数据库
   - 在项目开始做之间，就会做好数据字典，项目中一共需要多少张表，每一张表存储哪一些字段的数据
   - 表与表之间怎么关联

## 9.2环境

- 测试环境:   http://ip地址
- 生成环境：上线之后客户真实使用的环境    http：//www.taobao.com
  - SIT；测试环境    构造很多的数据    脏数据  异常数据
    电商项目订单     添加商品都购物车---付款---订单
  - UAT：用户验收环境
    taobao项目组的测试     zhanghao  1亿

- 部署环境：  测试环境的部署    测试工程师   第一次部署环境 root   ： jdk  tomcat  数据库 

  - 发包：
  - 生产环境的部署    很有经验的老的开发
  
## 9.3日志分析
  1. anr   crash    app产生的中间      app的客户端的日志
  2. 手机中的指定的文件中找    /data/anr
  3. 日志    服务器下面logs

4. 测试小流程

  - 开发  前端开发 A B    后端开发  a  b
  - 开发人员分配   登录  A   a
  - 测试人员分配 测试任务   登录  注册

5. 发现了bug---》提交给谁？判断是前端的bug还是后端的bug？

  - APP端
    - Andorid  sdk   
    - 安装了模拟器        模拟器相对于手机，在手机上操作app
    - adb命令：adb  shell  monkey  -p  包名 1000
      - adb logcat
      - adb  shell：手机本地
        cd   /data/anr
  - web端 网页 http://www.baidu.com
    - 金融项目环境
    - 偶现的bug ，不能直接的复现这些操作 ，去打印日志协助分析问题
    - 日志文件一般会展示所有的异常，大概异常发送的时间点 2:30  -4:30
    - 2024-5-12   14:02   XXXXX

# 10.DD命令

`dd`命令是Unix和Linux系统中一个非常强大的工具，用于转换和复制文件。</description><guid isPermaLink="true">http://blog.587459.xyz/post/9.html</guid><pubDate>Mon, 06 Jan 2025 12:34:25 +0000</pubDate></item><item><title>MySQL数据库的练习</title><link>http://blog.587459.xyz/post/8.html</link><description>### 1.导入exam-utf8（无外键）数据库&#13;
&#13;
&gt; [!TIP]&#13;
&gt; 导入数据库是为了方便后面的查询练习&#13;
&#13;
```sql&#13;
DROP database IF EXISTS exam;&#13;
&#13;
CREATE DATABASE IF NOT EXISTS exam CHARSET=utf8;  &#13;
&#13;
USE exam;&#13;
&#13;
/*创建部门表*/&#13;
CREATE TABLE dept(
deptno INT PRIMARY KEY,&#13;
dname VARCHAR(50),&#13;
loc VARCHAR(50)&#13;
);&#13;
&#13;
/*创建雇员表*/&#13;
CREATE TABLE emp(&#13;
empno INT PRIMARY KEY,&#13;
ename VARCHAR(50),&#13;
job VARCHAR(50),&#13;
mgr INT,&#13;
hiredate DATE,
sal DECIMAL(7,2),&#13;
COMM DECIMAL(7,2),&#13;
deptno INT&#13;
);&#13;
&#13;
/*创建工资等级表*/&#13;
CREATE TABLE salgrade(&#13;
grade INT PRIMARY KEY,&#13;
losal INT,&#13;
hisal INT&#13;
);&#13;
&#13;
/*创建学生表*/&#13;
CREATE TABLE stu(&#13;
sid INT PRIMARY KEY,&#13;
sname VARCHAR(50),&#13;
age INT,&#13;
gander VARCHAR(10),&#13;
province VARCHAR(50),&#13;
tuition INT&#13;
);&#13;
&#13;
/*插入dept表数据*/&#13;
INSERT INTO dept VALUES (10, '教研部', '北京');&#13;
INSERT INTO dept VALUES (20, '学工部', '上海');&#13;
INSERT INTO dept VALUES (30, '销售部', '广州');&#13;
INSERT INTO dept VALUES (40, '财务部', '武汉');&#13;
&#13;
/*插入emp表数据*/&#13;
INSERT INTO emp VALUES (1009, '曾阿牛', '董事长', NULL, '2001-11-17', 50000, NULL, 10);&#13;
INSERT INTO emp VALUES (1004, '刘备', '经理', 1009, '2001-04-02', 29750, NULL, 20);&#13;
INSERT INTO emp VALUES (1006, '关羽', '经理', 1009, '2001-05-01', 28500, NULL, 30);&#13;
INSERT INTO emp VALUES (1007, '张飞', '经理', 1009, '2001-09-01', 24500, NULL, 10);&#13;
INSERT INTO emp VALUES (1008, '诸葛亮', '分析师', 1004, '2007-04-19', 30000, NULL, 20);&#13;
INSERT INTO emp VALUES (1013, '庞统', '分析师', 1004, '2001-12-03', 30000, NULL, 20);&#13;
INSERT INTO emp VALUES (1002, '黛绮丝', '销售员', 1006, '2001-02-20', 16000, 3000, 30);&#13;
INSERT INTO emp VALUES (1003, '殷天正', '销售员', 1006, '2001-02-22', 12500, 5000, 30);&#13;
INSERT INTO emp VALUES (1005, '谢逊', '销售员', 1006, '2001-09-28', 12500, 14000, 30);&#13;
INSERT INTO emp VALUES (1010, '韦一笑', '销售员', 1006, '2001-09-08', 15000, 0, 30);&#13;
INSERT INTO emp VALUES (1012, '程普', '文员', 1006, '2001-12-03', 9500, NULL, 30);&#13;
INSERT INTO emp VALUES (1014, '黄盖', '文员', 1007, '2002-01-23', 13000, NULL, 10);&#13;
INSERT INTO emp VALUES (1011, '周泰', '文员', 1008, '2007-05-23', 11000, NULL, 20);&#13;
&#13;
&#13;
INSERT INTO emp VALUES (1001, '甘宁', '文员', 1013, '2000-12-17', 8000, NULL, 20);&#13;
&#13;
/*插入salgrade表数据*/&#13;
INSERT INTO salgrade VALUES (1, 7000, 12000);&#13;
INSERT INTO salgrade VALUES (2, 12010, 14000);&#13;
INSERT INTO salgrade VALUES (3, 14010, 20000);&#13;
INSERT INTO salgrade VALUES (4, 20010, 30000);&#13;
INSERT INTO salgrade VALUES (5, 30010, 99990);&#13;
&#13;
/*插入stu表数据*/&#13;
INSERT INTO `stu` VALUES ('1', '王永', '23', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('2', '张雷', '25', '男', '辽宁', '2500');&#13;
INSERT INTO `stu` VALUES ('3', '李强', '22', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('4', '宋永合', '25', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('5', '叙美丽', '23', '女', '北京', '1000');&#13;
INSERT INTO `stu` VALUES ('6', '陈宁', '22', '女', '山东', '2500');&#13;
INSERT INTO `stu` VALUES ('7', '王丽', '21', '女', '北京', '1600');&#13;
INSERT INTO `stu` VALUES ('8', '李永', '23', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('9', '张玲', '23', '女', '广州', '2500');&#13;
INSERT INTO `stu` VALUES ('10', '啊历', '18', '男', '山西', '3500');&#13;
INSERT INTO `stu` VALUES ('11', '王刚', '23', '男', '湖北', '4500');&#13;
INSERT INTO `stu` VALUES ('12', '陈永', '24', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('13', '李雷', '24', '男', '辽宁', '2500');&#13;
INSERT INTO `stu` VALUES ('14', '李沿', '22', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('15', '王小明', '25', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('16', '王小丽', '23', '女', '北京', '1000');&#13;
INSERT INTO `stu` VALUES ('17', '唐宁', '22', '女', '山东', '2500');&#13;
INSERT INTO `stu` VALUES ('18', '唐丽', '21', '女', '北京', '1600');&#13;
INSERT INTO `stu` VALUES ('19', '啊永', '23', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('20', '唐玲', '23', '女', '广州', '2500');&#13;
INSERT INTO `stu` VALUES ('21', '叙刚', '18', '男', '山西', '3500');&#13;
INSERT INTO `stu` VALUES ('22', '王累', '23', '男', '湖北', '4500');&#13;
INSERT INTO `stu` VALUES ('23', '赵安', '23', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('24', '关雷', '25', '男', '辽宁', '2500');&#13;
INSERT INTO `stu` VALUES ('25', '李字', '22', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('26', '叙安国', '25', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('27', '陈浩难', '23', '女', '北京', '1000');&#13;
INSERT INTO `stu` VALUES ('28', '陈明', '22', '女', '山东', '2500');&#13;
INSERT INTO `stu` VALUES ('29', '孙丽', '21', '女', '北京', '1600');&#13;
INSERT INTO `stu` VALUES ('30', '李治国', '23', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('31', '张娜', '23', '女', '广州', '2500');&#13;
INSERT INTO `stu` VALUES ('32', '安强', '18', '男', '山西', '3500');&#13;
INSERT INTO `stu` VALUES ('33', '王欢', '23', '男', '湖北', '4500');&#13;
INSERT INTO `stu` VALUES ('34', '周天乐', '23', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('35', '关雷', '25', '男', '辽宁', '2500');&#13;
INSERT INTO `stu` VALUES ('36', '吴强', '22', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('37', '吴合国', '25', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('38', '正小和', '23', '女', '北京', '1000');&#13;
INSERT INTO `stu` VALUES ('39', '吴丽', '22', '女', '山东', '2500');&#13;
INSERT INTO `stu` VALUES ('40', '冯含', '21', '女', '北京', '1600');&#13;
INSERT INTO `stu` VALUES ('41', '陈冬', '23', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('42', '关玲', '23', '女', '广州', '2500');&#13;
INSERT INTO `stu` VALUES ('43', '包利', '18', '男', '山西', '3500');&#13;
INSERT INTO `stu` VALUES ('44', '威刚', '23', '男', '湖北', '4500');&#13;
INSERT INTO `stu` VALUES ('45', '李永', '23', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('46', '张关雷', '25', '男', '辽宁', '2500');&#13;
INSERT INTO `stu` VALUES ('47', '送小强', '22', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('48', '关动林', '25', '男', '北京', '1500');&#13;
INSERT INTO `stu` VALUES ('49', '苏小哑', '23', '女', '北京', '1000');&#13;
INSERT INTO `stu` VALUES ('50', '赵宁', '22', '女', '山东', '2500');&#13;
INSERT INTO `stu` VALUES ('51', '陈丽', '21', '女', '北京', '1600');&#13;
INSERT INTO `stu` VALUES ('52', '钱小刚', '23', '男', '北京', '3500');&#13;
INSERT INTO `stu` VALUES ('53', '艾林', '23', '女', '广州', '2500');&#13;
INSERT INTO `stu` VALUES ('54', '郭林', '18', '男', '山西', '3500');&#13;
INSERT INTO `stu` VALUES ('55', '周制强', '23', '男', '湖北', '4500');&#13;
```&#13;
&#13;
### 2.创建数据库表&#13;
&#13;
```sql&#13;
-- 注释：&#13;
-- 单行注释&#13;
# 单行注释&#13;
&#13;
/*&#13;
多行注释&#13;
多行注释&#13;
多行注释&#13;
*/&#13;
&#13;
# 创建库的语句：&#13;
# CREATE DATABASE 库名称;&#13;
CREATE DATABASE mmb;&#13;
USE mmb;  -- 使用库&#13;
&#13;
# 创建表&#13;
/*&#13;
CREATE TABLE 表名称(&#13;
列名1 类型 约束,&#13;
列名2 类型 约束,&#13;
……&#13;
列名N 类型 约束&#13;
)CHARSET=utf8;&#13;
*/&#13;
# 数据类型：&#13;
# 数值：&#13;
# int&#13;
# float  decimail&#13;
# 字符：char / varchar&#13;
# 日期时间: date / datetime&#13;
&#13;
CREATE DATABASE IF NOT EXISTS oneday;&#13;
&#13;
USE oneday;&#13;
&#13;
CREATE TABLE dept(&#13;
deptno INT PRIMARY KEY AUTO_INCREMENT,&#13;
deptname VARCHAR(10) UNIQUE NOT NULL,&#13;
loc VARCHAR(20) NOT NULL DEFAULT '北京'&#13;
)CHARSET=utf8;&#13;
&#13;
INSERT INTO dept(deptname,loc) VALUES('销售部','北京');&#13;
INSERT INTO dept(deptname,loc) VALUES('人事部','上海');&#13;
INSERT INTO dept(deptname) VALUES('研发部');&#13;
INSERT INTO dept(deptno,deptname,loc) VALUES(4,'外包部','深圳');&#13;
```&#13;
&#13;
### 3.主键自增、唯一、非空、默认值&#13;
&#13;
```sql&#13;
# 主键约束：&#13;
# 唯一、非空、一个表最多一个主键&#13;
&#13;
CREATE TABLE dept(&#13;
deptno INT PRIMARY KEY,&#13;
dname VARCHAR(10),&#13;
loc VARCHAR(20)&#13;
)CHARSET=utf8;&#13;
&#13;
INSERT INTO dept VALUES(10,'教研部','北京');&#13;
INSERT INTO dept VALUES(20,'学工部','上海');&#13;
INSERT INTO dept VALUES(NULL,NULL,NULL);&#13;
INSERT INTO dept VALUES(20,NULL,NULL);&#13;
&#13;
# 主键自增：数据类型一般是整数&#13;
# PRIMARY KEY 主键  AUTO_INCREMENT 自增&#13;
CREATE TABLE dept(&#13;
deptno INT PRIMARY KEY AUTO_INCREMENT,&#13;
dname VARCHAR(10),&#13;
loc VARCHAR(20)&#13;
)CHARSET=utf8;&#13;
&#13;
INSERT INTO dept(dname,loc) VALUES('教研部','北京');&#13;
INSERT INTO dept(dname,loc) VALUES('学工部','上海');&#13;
INSERT INTO dept VALUES(30,'销售部','广州');&#13;
INSERT INTO dept(deptno,dname,loc)VALUES(31,'财务部','武汉');&#13;
&#13;
# 唯一约束：&#13;
# 值必须是唯一的、一个表可以有多个唯一约束、值可以为空&#13;
CREATE TABLE dept(&#13;
deptno INT PRIMARY KEY AUTO_INCREMENT,&#13;
dname VARCHAR(10) UNIQUE,&#13;
loc VARCHAR(20)&#13;
)CHARSET=utf8;&#13;
&#13;
INSERT INTO dept(dname,loc) VALUES('教研部','北京');  # 只能执行1次&#13;
INSERT INTO dept(dname,loc) VALUES('学工部','上海');  &#13;
INSERT INTO dept(dname,loc) VALUES(NULL,'上海');  &#13;
&#13;
# 非空约束&#13;
# not null&#13;
CREATE TABLE dept(&#13;
deptno INT PRIMARY KEY AUTO_INCREMENT,&#13;
dname VARCHAR(10) UNIQUE NOT NULL,&#13;
loc VARCHAR(20)&#13;
)CHARSET=utf8;&#13;
&#13;
INSERT INTO dept(dname,loc) VALUES('教研部','北京');  # 只能执行1次&#13;
INSERT INTO dept(dname,loc) VALUES('学工部','上海');  &#13;
INSERT INTO dept(dname,loc) VALUES('','上海');  &#13;
&#13;
# NULL : 空&#13;
# ''   : 空字符串&#13;
&#13;
CREATE TABLE dept(&#13;
deptno INT PRIMARY KEY AUTO_INCREMENT,&#13;
dname VARCHAR(10) UNIQUE NOT NULL,&#13;
loc VARCHAR(20) NOT NULL DEFAULT ''&#13;
)CHARSET=utf8;&#13;
&#13;
INSERT INTO dept(dname,loc) VALUES('教研部','北京'); &#13;
INSERT INTO dept(dname) VALUES('学工部'); &#13;
INSERT INTO dept(dname,loc) VALUES('财务部',NULL); &#13;
&#13;
# 主键自增、唯一、非空、默认值：&#13;
# 主键：唯一、非空、一个表最多只有一个&#13;
# 唯一：唯一、可以有多个唯一约束、可以为NULL&#13;
# 非空：不能为空&#13;
# 默认值：不指定值的情况使用默认值&#13;
# 主键 + 自增&#13;
# 唯一 + 非空&#13;
# 非空 + 默认值&#13;
```&#13;
&#13;
&#13;
&#13;
### 4.外键约束&#13;
&#13;
```sql&#13;
# 外键约束：&#13;
# 保证引用的完整性&#13;
# RESTRIC：如果子表中存在与父表相关联的记录，则阻止父表的更新或删除操作。</description><guid isPermaLink="true">http://blog.587459.xyz/post/8.html</guid><pubDate>Sun, 17 Nov 2024 23:05:19 +0000</pubDate></item><item><title>开源镜像站及部分Linux换源</title><link>http://blog.587459.xyz/post/7.html</link><description># 一、国内常用的开源镜像站&#13;
&#13;
- 网易：http://mirrors.163.com/&#13;
- 搜狐：http://mirrors.sohu.com/&#13;
- 阿里：http://mirrors.aliyun.com/&#13;
- 腾讯：https://mirrors.cloud.tencent.com/&#13;
- 华为：https://mirrors.huaweicloud.com/home/&#13;
- 清华大学：https://mirrors.tuna.tsinghua.edu.cn/&#13;
- 中国科学技术大学：https://mirrors.ustc.edu.cn/&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 上述并不是全部，只是本人日常使用最多的一些镜像站&#13;
&#13;
# 二、Linux换源(自用)&#13;
&#13;
## 1、Debian12换源(以中科大镜像源为例)&#13;
&#13;
### a.先换部分源&#13;
&#13;
```&#13;
sudo sed -i 's/deb.debian.org/mirrors.ustc.edu.cn/g' /etc/apt/sources.list&#13;
```&#13;
&#13;
### b.安装vim之后再编辑文件&#13;
&gt; [!NOTE]&#13;
&gt; 添加自由固件，并修改安全更新源&#13;
&#13;
```&#13;
/etc/apt/sources.list&#13;
```&#13;
&#13;
```&#13;
# 默认注释了源码仓库，如有需要可自行取消注释&#13;
deb http://mirrors.ustc.edu.cn/debian bookworm main contrib non-free non-free-firmware&#13;
# deb-src http://mirrors.ustc.edu.cn/debian bookworm main contrib non-free non-free-firmware&#13;
deb http://mirrors.ustc.edu.cn/debian bookworm-updates main contrib non-free non-free-firmware&#13;
# deb-src http://mirrors.ustc.edu.cn/debian bookworm-updates main contrib non-free non-free-firmware&#13;
&#13;
# backports 软件源，请按需启用&#13;
# deb http://mirrors.ustc.edu.cn/debian bookworm-backports main contrib non-free non-free-firmware&#13;
# deb-src http://mirrors.ustc.edu.cn/debian bookworm-backports main contrib non-free non-free-firmware&#13;
&#13;
# 建议在确实有需要的情况下才使用镜像站的安全更新源&#13;
deb http://mirrors.ustc.edu.cn/debian-security/ bookworm-security main contrib non-free non-free-firmware&#13;
# deb-src http://mirrors.ustc.edu.cn/debian-security/ bookworm-security main contrib non-free non-free-firmware&#13;
```&#13;
&#13;
### c.使用`sudo apt-get update`更新索引生效&#13;
&#13;
## 2.CentOS Stream&#13;
&#13;
### a.使用vim编辑器换源&#13;
&#13;
#### 1.第一个文件&#13;
&#13;
```&#13;
/etc/yum.repos.d/centos.repo&#13;
```&#13;
&#13;
```&#13;
[baseos]&#13;
name=CentOS Stream $releasever - BaseOS&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/BaseOS/$basearch/os&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-baseos-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
countme=1&#13;
enabled=1&#13;
&#13;
[baseos-debuginfo]&#13;
name=CentOS Stream $releasever - BaseOS - Debug&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/BaseOS/$basearch/debug/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-baseos-debug-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[baseos-source]&#13;
name=CentOS Stream $releasever - BaseOS - Source&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/BaseOS/source/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-baseos-source-$stream&amp;arch=source&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[appstream]&#13;
name=CentOS Stream $releasever - AppStream&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/AppStream/$basearch/os&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-appstream-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
countme=1&#13;
enabled=1&#13;
&#13;
[appstream-debuginfo]&#13;
name=CentOS Stream $releasever - AppStream - Debug&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/AppStream/$basearch/debug/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-appstream-debug-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[appstream-source]&#13;
name=CentOS Stream $releasever - AppStream - Source&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/AppStream/source/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-appstream-source-$stream&amp;arch=source&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[crb]&#13;
name=CentOS Stream $releasever - CRB&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/CRB/$basearch/os&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-crb-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
countme=1&#13;
enabled=1&#13;
&#13;
[crb-debuginfo]&#13;
name=CentOS Stream $releasever - CRB - Debug&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/CRB/$basearch/debug/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-crb-debug-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[crb-source]&#13;
name=CentOS Stream $releasever - CRB - Source&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/CRB/source/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-crb-source-$stream&amp;arch=source&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
```&#13;
&#13;
#### 2.第二个文件&#13;
&#13;
```&#13;
/etc/yum.repos.d/centos-addons.repo&#13;
```&#13;
&#13;
```&#13;
[highavailability]&#13;
name=CentOS Stream $releasever - HighAvailability&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/HighAvailability/$basearch/os&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-highavailability-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
countme=1&#13;
enabled=0&#13;
&#13;
[highavailability-debuginfo]&#13;
name=CentOS Stream $releasever - HighAvailability - Debug&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/HighAvailability/$basearch/debug/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-highavailability-debug-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[highavailability-source]&#13;
name=CentOS Stream $releasever - HighAvailability - Source&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/HighAvailability/source/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-highavailability-source-$stream&amp;arch=source&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[nfv]&#13;
name=CentOS Stream $releasever - NFV&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/NFV/$basearch/os&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-nfv-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
countme=1&#13;
enabled=0&#13;
&#13;
[nfv-debuginfo]&#13;
name=CentOS Stream $releasever - NFV - Debug&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/NFV/$basearch/debug/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-nfv-debug-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[nfv-source]&#13;
name=CentOS Stream $releasever - NFV - Source&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/NFV/source/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-nfv-source-$stream&amp;arch=source&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[rt]&#13;
name=CentOS Stream $releasever - RT&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/RT/$basearch/os&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-rt-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
countme=1&#13;
enabled=0&#13;
&#13;
[rt-debuginfo]&#13;
name=CentOS Stream $releasever - RT - Debug&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/RT/$basearch/debug/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-rt-debug-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[rt-source]&#13;
name=CentOS Stream $releasever - RT - Source&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/RT/source/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-rt-source-$stream&amp;arch=source&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[resilientstorage]&#13;
name=CentOS Stream $releasever - ResilientStorage&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/ResilientStorage/$basearch/os&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-resilientstorage-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
countme=1&#13;
enabled=0&#13;
&#13;
[resilientstorage-debuginfo]&#13;
name=CentOS Stream $releasever - ResilientStorage - Debug&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/ResilientStorage/$basearch/debug/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-resilientstorage-debug-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[resilientstorage-source]&#13;
name=CentOS Stream $releasever - ResilientStorage - Source&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/$releasever-stream/ResilientStorage/source/tree/&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-resilientstorage-source-$stream&amp;arch=source&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centosofficial&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
&#13;
[extras-common]&#13;
name=CentOS Stream $releasever - Extras packages&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/SIGs/$releasever-stream/extras/$basearch/extras-common&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-extras-sig-extras-common-$stream&amp;arch=$basearch&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-Extras-SHA512&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
countme=1&#13;
enabled=1&#13;
&#13;
[extras-common-source]&#13;
name=CentOS Stream $releasever - Extras packages - Source&#13;
baseurl=https://mirrors.ustc.edu.cn/centos-stream/SIGs/$releasever-stream/extras/source/extras-common&#13;
# metalink=https://mirrors.centos.org/metalink?repo=centos-extras-sig-extras-common-source-$stream&amp;arch=source&amp;protocol=https,http&#13;
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-SIG-Extras-SHA512&#13;
gpgcheck=1&#13;
repo_gpgcheck=0&#13;
metadata_expire=6h&#13;
enabled=0&#13;
```&#13;
&#13;
### b.运行 `yum makecache` 更新缓存。</description><guid isPermaLink="true">http://blog.587459.xyz/post/7.html</guid><pubDate>Mon, 11 Nov 2024 06:24:25 +0000</pubDate></item><item><title>临时邮箱的使用</title><link>http://blog.587459.xyz/post/6.html</link><description>## 一、几个临时邮箱地址

1. [tempmail](https://tempmail.plus/zh) 可随用随丢
2. [临时邮件](https://mail.tm/zh) 可一直使用的临时邮箱
3. [临时教育邮箱 ](https://mail.sunls.de/) 可以尝试注册某些需要教育邮箱的网站
4. [一次性电子邮件](https://mail.td/zh)
5. [仅提供临时邮箱接收邮件](https://mail.loli.vet/)

## 二、临时邮箱的使用

&gt; [!TIP]
&gt; 临时邮箱一般都为接验证码使用，我只以上述第五个演示接码操作。</description><guid isPermaLink="true">http://blog.587459.xyz/post/6.html</guid><pubDate>Tue, 01 Oct 2024 05:19:07 +0000</pubDate></item><item><title>Android端压缩与解压</title><link>http://blog.587459.xyz/post/5.html</link><description>## 1.安装软件&#13;
&#13;
### 1.1两款软件&#13;
&#13;
#### ZArchiverPro&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; ZArchiverPro是大佬分享的，可以使用我提供是链接进行下载，有必要可以**支持正版**&#13;
&gt;&#13;
&gt; 只要不是远古手机或者是Redmi 9A等使用32位系统的，都**建议使用64位版本**&#13;
&gt;&#13;
&gt; [armv8a(64位)](https://wwwe.lanzouq.com/i0GYG29iqykf) 密码:h80j	[armv7a(32位)](https://wwwe.lanzouq.com/iqbji1npc15i) 密码:9fih&#13;
&#13;
#### MT文件管理器&#13;
&#13;
&gt; [!NOTE]&#13;
&gt;&#13;
&gt; [下载地址](https://mt2.cn/)&#13;
&gt;&#13;
&gt; mt管理器其免费功能已经够用 **！！！！**&#13;
&gt;&#13;
&gt; **如果出现zip文件乱码的，可以尝试mt管理器解压。</description><guid isPermaLink="true">http://blog.587459.xyz/post/5.html</guid><pubDate>Sun, 08 Sep 2024 06:39:02 +0000</pubDate></item><item><title> 阅读源仓库的使用

</title><link>http://blog.587459.xyz/post/4.html</link><description>## 一、访问网址&#13;
### [源仓库](https://www.yckceo.com/yuedu/index/index.html)的地址&#13;
&#13;
| 访问网址之后的界面 | 1.点书源合集 |  2.合适的点进去，网络导入复制 |&#13;
|:-----:|:-----:|:-----:|&#13;
| &lt;img src='https://hantianzhun.github.io/blog/issues4.1.jpg' alt='1000017082.jpg' style='zoom:25%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues4.2.jpg' alt='1000017084.jpg' style='zoom:25%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues4.3.jpg' alt='1000017088.jpg' style='zoom:25%;' /&gt; |&#13;
| 图一 | 图二 | 图三 |&#13;
## 二、导入书源&#13;
&#13;
导入书源请看[这里](https://blog.hanli.us.kg/post/3.html#2.导入书源)&#13;
。</description><guid isPermaLink="true">http://blog.587459.xyz/post/4.html</guid><pubDate>Tue, 03 Sep 2024 08:33:45 +0000</pubDate></item><item><title>Android端开源阅读安装及导入书源</title><link>http://blog.587459.xyz/post/3.html</link><description>## 1.安装软件&#13;
&#13;
### 1.1 在github上面进行下载&#13;
&#13;
```&#13;
https://github.com/gedoor/legado/releases&#13;
```&#13;
&#13;
### 1.2 蓝奏云网盘&#13;
&#13;
下载需要把浏览器ua改成电脑版/电脑模式/PC等&#13;
&#13;
```shell&#13;
https://wwwe.lanzouq.com/ibQ6728pr7mh&#13;
密码:c6nu&#13;
```&#13;
&#13;
|                    1.这里以via浏览器为例                     |                        2.点击电脑模式                        |&#13;
| :----------------------------------------------------------: | :----------------------------------------------------------: |&#13;
| &lt;img src='https://hantianzhun.github.io/blog/issues2.1.png' alt='20482.png' style='zoom:25%;' /&gt; | &lt;img src='https://hantianzhun.github.io/blog/issues2.2.png' alt='20483.png' style='zoom:25%;' /&gt; |&#13;
|                             图一                             |                             图二                             |&#13;
&#13;
&gt; [!TIP]&#13;
&gt; 此时上图图二可能会白屏，是因为缩放问题，从外面双指向里捏合就能看到上述图片。</description><guid isPermaLink="true">http://blog.587459.xyz/post/3.html</guid><pubDate>Sat, 31 Aug 2024 09:41:06 +0000</pubDate></item><item><title>Android端clash的安装与基础使用</title><link>http://blog.587459.xyz/post/2.html</link><description>## 1.安装软件

### 1.1 在github上面进行下载

普通手机用户请下载armv8a(64位)版本，太古老的手机可以使用armv7a(32位)版本，X86等特殊设备可以下载对应的版本。</description><guid isPermaLink="true">http://blog.587459.xyz/post/2.html</guid><pubDate>Thu, 29 Aug 2024 06:00:16 +0000</pubDate></item><item><title>Markdown语法</title><link>http://blog.587459.xyz/post/1.html</link><description># Markdown语法

&gt; [!NOTE]
&gt; Markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成结构化的HTML。</description><guid isPermaLink="true">http://blog.587459.xyz/post/1.html</guid><pubDate>Thu, 29 Aug 2024 05:32:36 +0000</pubDate></item></channel></rss>